Maximillian gave a very good overview of how React works.  When using create-react-app, there are some essential
files at the top level which enable the application to work:

1.  package.json
2.  index.css
3.  index.js
4.  index.html
5.  App.js

The center of activity is index.js:
-------------------------------------------------------------------
import ReactDOM from 'react-dom/client';

import './index.css';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);
-------------------------------------------------------------------
Maximillian stated React is actually split across to libraries, react and react-dom, both of which are imported
in package.json:

"react": "^18.0.0",
"react-dom": "^18.0.0",
-------------------------------------------------------------------
So create-react-app imports ReactDOM from 'react-dom/client' making that object available to our application.
It also imports "index.css" and the App itself.  Note in normal Javascript we could not import CSS into a
Javascript file the transformation code in create-react-app (when we run npm start) does the necessary
transformations to make this work.

We import the App, since this is a Javascript file we need to remove the suffix, all other files (like the css)
need to retain their suffixes.

The index.html file is a simple html file which has an empty <div> element in the <body> with id "root".

<div id="root"></div>, the ReactDOM grabs this element in the code above and calls the "createRoot" method
on it.  Then in the last line of code the root constant calls the render method on App.

Note the root div is nothing more than a place holder into which we place our high level React component called
App.  If we look at App, we see it is not normal Javascript.  It is a React component but it has normal Javascript
function syntax.  The difference is that it returns somethig that looks like HTML, in fact this HTML like syntax
is called JSX, which we will learn about shortly.
--------------------------------------------------------------------------------------------------------------
Here is our App component:
function App() {
  return (
    <div>
      <h2>Let's get started!</h2>
    </div>
  );
}

export default App;
--------------------------------------------
Again as Maximillian noted transformations happen when the application is run which turn the above code into
browser friendly code.  If we run the application we can use the Chrome Developer Tools and go to sources and
in the sources tab we will see a static/js folder in that folder we see a number of files.  One of those files
will contain an App function which looks substantially different that our App component.  This is because that
different App function is taking our easy to read App component and transforming it into something the browser
can understand.

this is important because React enables the developer to write code which is easy to understand and then the
library itself assumes the resposibility of transforming the code into something the browser can understand.
--------------------------------------------------------------------------------------------------------------
How React works:
React takes a "Declarative Approach" to application development, specifically:

1.  React allows one to create re-usable and reactive components consisting of HTML, Javascript, and CSS
2.  One defines the target state and then React figures out the actual Javascript DOM instructions

Note compared to React using straight Javascript, HTML, CSS is called an "Imperative" approach, because you
would have to tell Javascript what to do:

1.  Create a paragraph element.
2.  Insert text into the newly created paragraph element.
3.  Insert the paragraph element somewhere in the DOM.

React is declarative, what one does is define the end state(s) and then the React library figures out what
DOM instructions to use to bring the desired state to the screen.
--------------------------------------------------------------------------------------------------------------
A component in React is nothing more than a function.  Before the advent of hooks and functional components,
components in React where classes.  Note about the naming conventions for components, for custom components
always use PascalCase which is like camelCase but the first work is capitalized.  React looks for components
which are PascalCase and identifies them as custom components.  When components in JSX begin with lower case,
React identifies them as standard HTML elements (div, p, h2, etc)
--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
SECTION 4 REACT STATE AND WORKING WITH EVENTS

React has a corresponding prop for all event handlers in Javascript.  The all begin with "on" and then the next
word begins with a capital letter.  For instance, "onClick".  These event handlers take an argument which is
a function and by convention the handler is suffixed with the word "Handler" so for onClick the handler would be
name "clickHandler".  Note one just poines to the function DO NOT CALL THE FUNCTION in the event handler prop.  This
is because if the function is called then React will call it during parsing and not during execution.

import "./ExpenseItem.css";
import ExpenseDate from "./ExpenseDate";
import Card from "../UI/Card";
import { lazy } from "react";

const ExpenseItem = props => {
  let title = props.title;
  const amount = '$' + props.amount;
  const clickHandler = () => {
    const titles = ["Foo", "Bar", "Fizz", "Buzz"];
    console.log("Clicked!!!");
    console.log("title was: " + title);
    const index = Math.floor(Math.random() * titles.length)
    title = titles[index];
    console.log("title is now: " + title);
  }

  return (
    <Card className="expense-item">
      <ExpenseDate date={props.date} />
      <div className="expense-item__description">
        <h2>{title}</h2>
        <div className="expense-item__price">{amount}</div>
      </div>
      <button onClick={clickHandler}>Change Title</button>
    </Card>
  );
}

export default ExpenseItem;

So when we run this code the title displayed DOES NOT GET UPDATED in the view from its original value of props.title.
This is because when React executes it starts from the top of the component hierarchy and works its way down
through the component hierarchy executing every component just once.  From then on no components get called again
unless the developer declares something that can be called and performs an update.  However, a rerender in React
DOES NOT OCCUR UNLESS THE STATE CHANGES.  So while the LOCAL VARIABLE WILL CHANGE each time the clickHandler is
called, we will not see the result in the UI unless there is an accompanying state change.

So if you call a function which is tied to a click handler that function will execute and it will change the
local variable, but changing a local variable DOES NOT CAUSE A RERENDER IN REACT.  To further explain this concept
if the page was reloaded, what would take place is a REPEAT OF THE INITIAL RENDERING so title would be set again to
props.title and then remain at that state with respect to rendering as no additional renderings will take place without
a state update.

Hook Rule: a hook like useState must be called in the component but not inside nested functions or inside the return.
The best place to put the call is near the top of the component before the return.

naming covention for state variables: variable name describes is role, then this variable name is prefixed by "set"
const [title, setTitle] = useState(props.title);

import "./ExpenseItem.css";
import ExpenseDate from "./ExpenseDate";
import Card from "../UI/Card";
import React, { useState } from "react";

const ExpenseItem = props => {
  const [title, setTitle] = useState(props.title);
  const amount = '$' + props.amount;
  const clickHandler = () => {
    const titles = ["Foo", "Bar", "Fizz", "Buzz"];
    const index = Math.floor(Math.random() * titles.length)
    setTitle(titles[index]);
    console.log("title is now: " + title);
  }

  return (
    <Card className="expense-item">
      <ExpenseDate date={props.date} />
      <div className="expense-item__description">
        <h2>{title}</h2>
        <div className="expense-item__price">{amount}</div>
      </div>
      <button onClick={clickHandler}>Change Title</button>
    </Card>
  );
}

export default ExpenseItem;

A very important concept to note if we look at what is rendered versus what is logged to the console, when we
select the "Change Title" button, the console logging seems to lag the render.  This is because when setTitle
is used React schedules the state change with the component rerender as the state changes forces a component
rerender.  So when "Change Title" is selected React updates the state variable "title" and rerenders the component
to display this change.  However, setTitle(titles[index]) changes title JUST FOR THE RERENDER of the component,
the change to the state variable title will not be reflected to the console UNTIL THE NEXT RENDER.  So from the
point of view of the clickHandler the title varible change to the console lags the rerender by one state change.

A really key point to understand here is that useState registers state variables on a PER COMPONENT INSTANCE.
So even though a developer might define one component, as we have done in this case with ExpenseItem, if there
are four instances of ExpenseItem then there are four different state variables registered for each instance of
ExpenseItem.

STATE IS SEPARATE BASED ON A PER COMPONENT INSTANCE

Maximillian gives a discussion of how state works in React which is worth recording.  I think this is one of the
key concepts to understand if one wants to write more complicated UI's based on React.  We have the following code
in ExpenseItem:

if we do somthing like this in the clickHandler, title = setTitle(titles[index]) we will get an error.  So the question
to ask is, "How does React update the state variable title when it is declared as a constant?".  One must understand
how React works with respect to its different stages and how state works in each of those stages.  React has an initial
rendering, subsequent renderings, and then component retirement.  React keeps track of the renderings, during the initial
render const [title, setTitle] = useState(props.title) title is assigned props.title or whatever argument is provided to
useState.  IN SUBSEQUENT renderings (which React keeps track of) title is initialized with the return value from setTitle,
which in this case is a randomn selection from the titles array.  Note in each time title is REINITIALIZED, NOT
REASSIGNED.

const ExpenseItem = props => {
  const [title, setTitle] = useState(props.title);
  const amount = '$' + props.amount;
  const clickHandler = () => {
    const titles = ["Foo", "Bar", "Fizz", "Buzz"];
    const index = Math.floor(Math.random() * titles.length)
    setTitle(titles[index]);
    console.log("title is now: " + title);
  }
  return (...)
}

As I do, I prefer to declare each state variable and its update function separately.  However, one can return an
object which updates multiple state variables.  Note the code below SHOULD BE USED WHEN THE NEW STATE DEPENDS ON
THE PREVIOUS STATE:

const [userInput, setUserInput] = useState({
  enteredTitle: '',
  enteredAmount: '',
  enteredDate: ''
});

setUserInput((prevState) => {
  return { ...prevState, enteredTitle: event.target.value }
});

We would have to repeat the above code for each state variable that needs to be updated, of course the 
actual update would be different for the enteredAmount and enteredDate, i.e., 

setUserInput((prevState) => {
  return { ...prevState, enteredAmount: event.target.value }
});

<label id="form-title">Title</label>
<input
  aria-labelledby="form-title"
  type="text"
  value={enteredTitle}
  onChange={titleChangeHandler}
/>

In the above code we have two-way binding, as we not only listen for a state update, i.e., onChange, but we also
set the value of the input element to the state variable enteredTitle.
--------------------------------------------------------------------------------------------------------------
VERY IMPORTANT CONCEPT => LIFTING STATE UP

This is one of the most important concepts when developing React applications.  One needs to know how to pass
data from parent to child (easy one uses props) and from child to parent (not as easy, one uses function pointers).

Before we launch into the details of the code Max has developed so far we need to understand the current high level
architecture of the application as it now is and then how React requires that data be passed from parent to child
and from child to parent.

In the current architecture of the application we have the App component at the top and then underneath we have
a presentation layer and a layer which acquires new data:

App.js
|
|
|------ NewExpenses.js
|       |
|       |
|       |------ ExpenseForm.js
|
|
|------ Expenses.js
|       |
|       |
|       |------ ExpenseItem.js
|               |
|               |
|               |------ ExpenseDate.js


Expeneses is the presentation layer it takes the data from App.js (the data array) and passes it down to ExpenseItem.js
So for the purpose of this discussion we do not need to be concerned about those three components as they are really only
concerned about displaying data.

In React passing data down from the parent to a child is simple, we just use props for that.  However, how do we pass
props from the child back up to the parent?  Simply put, we pass a pointer to a function and this function will originate,
that is be defined in the parent.  However, the function will be called in the child component where the data is generated.
Thus the function body will execute in the parent scope and any data generated by the child will be available to the parent
in the body of the function.

One must also remember, when passing data from parent to child OR from child to parent, no intermediate components can be
skipped.  So data has to be passed from child to immediate parent and then to the next immediate parent.  Likewsie for
passing props down from a parent to a distant child, the props must to through all the intermediate children.

Let's look at a practical example in the code above.

Let's start from the very top in App.js:

  return (
    <div>
      <NewExpense onAddExpense={addExpenseHandler} />
      <Expenses items={expenses} />
    </div>
  );

  In App.js we define addExpenseHandler as follows:

  const addExpenseHandler = expense => {
    console.log("In App.js");
    console.log(expense);
  } 

So the function addExpenseHandler is defined and will be executed at the App.js level.  Notice the parameter,
expense, will be passed to addExpenseHandler and thus available to the App.js component.  So where does this 
parameter come from?  We will see it comes from the invocation in a child component.

Now the <NewExpense /> component is given a prop by its parent (App.js) which is called onAddExpense.  If we
look at the <NewExpense /> component it passes a prop down to its child, <ExpenseForm />, called onSaveExpenseData.
This prop points to a function defined in <NexExpense /> called saveExpenseDataHandler.  We can see this function
calls the function passed down from App.js via props:

const NewExpense = (props) => {
  const saveExpenseDataHandler = enteredExpenseData => {
    const expenseData = {
      ...enteredExpenseData,
      id: Math.random().toString(),
    }
    props.onAddExpense(expenseData); // calls the onAddExpense prop and passes up the data (expenseData) to 
    // the parent component App.js.  Notice the saveExpenseDataHandler expects a parameter,
    // enteredExpenseData, which is obtained from the child component, <ExpenseForm />.
  }

  return (
    <div className="new-expense">
      <ExpenseForm onSaveExpenseData={saveExpenseDataHandler} />
    </div>
  );
};

Now finally, lets look at the appropriate code for <ExpenseForm />:

 const submitHandler = (event) => {
    event.preventDefault();    
    const expenseData = {
      title: enteredTitle,
      amount: enteredAmount,
      date: new Date(enteredDate),
    };
    props.onSaveExpenseData(expenseData);
    setEnteredAmount('');
    setEnteredDate('');
    setEnteredTitle('');
  }

  so the above code is executed when the Form is submitted.  Notice via props, <ExpenseForm /> calls
  the onSaveExpenseData defined in <NewExpense /> and passes the entered Form data.

  To reiterate a very important concept, in the lowest child, <ExpenseForm />, the submitHandler obtains the
  data from the form and then takes the data and calls the function passed down to it from the parent
  component <NewExpense /> => props.onSaveExpenseData(expenseData)

  When we get to <NewExpense /> in the saveExpenseDataHandler function it calls the prop handed down to it
  from its parent, App.js => props.onAddExpense(expenseData) the expenseData is the data from <ExpenseForm />
  with the addition of an id property.
--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

